// Code generated by counterfeiter. DO NOT EDIT.
package flyontimefakes

import (
	"sync"

	"github.com/Bo0mer/flyontime/pkg/flyontime"
)

type FakeCommander struct {
	CommandsStub        func() <-chan *flyontime.Command
	commandsMutex       sync.RWMutex
	commandsArgsForCall []struct{}
	commandsReturns     struct {
		result1 <-chan *flyontime.Command
	}
	commandsReturnsOnCall map[int]struct {
		result1 <-chan *flyontime.Command
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommander) Commands() <-chan *flyontime.Command {
	fake.commandsMutex.Lock()
	ret, specificReturn := fake.commandsReturnsOnCall[len(fake.commandsArgsForCall)]
	fake.commandsArgsForCall = append(fake.commandsArgsForCall, struct{}{})
	fake.recordInvocation("Commands", []interface{}{})
	fake.commandsMutex.Unlock()
	if fake.CommandsStub != nil {
		return fake.CommandsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.commandsReturns.result1
}

func (fake *FakeCommander) CommandsCallCount() int {
	fake.commandsMutex.RLock()
	defer fake.commandsMutex.RUnlock()
	return len(fake.commandsArgsForCall)
}

func (fake *FakeCommander) CommandsReturns(result1 <-chan *flyontime.Command) {
	fake.CommandsStub = nil
	fake.commandsReturns = struct {
		result1 <-chan *flyontime.Command
	}{result1}
}

func (fake *FakeCommander) CommandsReturnsOnCall(i int, result1 <-chan *flyontime.Command) {
	fake.CommandsStub = nil
	if fake.commandsReturnsOnCall == nil {
		fake.commandsReturnsOnCall = make(map[int]struct {
			result1 <-chan *flyontime.Command
		})
	}
	fake.commandsReturnsOnCall[i] = struct {
		result1 <-chan *flyontime.Command
	}{result1}
}

func (fake *FakeCommander) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commandsMutex.RLock()
	defer fake.commandsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommander) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ flyontime.Commander = new(FakeCommander)
